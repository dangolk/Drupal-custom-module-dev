<?php

/**
 * @file
 * Custom functionality for a wind farm database.
 */
 
 /**
 * Implements hook_help().
 */
 function windfarm_help($path, $arg){
    switch ($path) {
        case 'admin/help#windfarms':
            {
                $ret_val = '<h3>' . t('About') . '</h3>';
                $ret_val .= '<p>' . t('The Wind Farms module makes it easy to manage a database of wind farms.') . '</p>';
                return $ret_val; 
                break;
            }
        }
 }

/**
 * Implements hook_permission().
 */
 function windfarms_permission(){
    return array(
        'administer wind farms' => array(
        'title' => t('Administer Wind Farms'),
        'description' => t('Perform Administrative tasks on Wind Farms functionality'),
    )
    );
 }
 
 /**
 * Implements hook_menu().
 */
 function windfarms_menu(){
     $items = array();
    // Admin configuration group.     
     $items['admin/config/windfarms'] = array(
         'title' => 'Wind Farms',
         'description' => 'Administer Wind Farms', 
         'access arguments' => array('administer wind farms'),
     );
     
    // Admin configuration - Settings.
    $items['admin/config/windfarms/manage'] = array(
        'title' => 'Wind Farms Settings',
        'description' => 'Manage Wind Farm settings and configurations.',
        'access arguments' => array('administer wind farms'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('windfarms_admin_settings_form'),
    );
     
    return $items;
 }

/**
 * Implements hook_form().
 */
 function windfarms_admin_settings_form($node, &$form_state){
     $form = array();
     
     $form['overview'] = array(
         '#markup' => t('This interface allows administrators to manage general Wind Farm Settings'), 
         '#prefix' => '<p>', 
         '#suffix' => '</p>',          
     );
     
     $form['windfarms_gmap'] = array(
         '#title' => t('Enable Google Maps'),
         '#description' => t('When enabled, Google Maps will be rendered if latitude and longitude are known.'),
         '#type' => 'checkbox',
         '#default' => variable_get('windfarms_gmap'),
     );
     
     $form['default_center'] = array(
         '#title' => t('Map center'),
         '#description' => t('Location of the center of the map of wind farms.'),
         '#type' => 'fieldset',
         '#collapsible' => TRUE,
         '#collapsed' => FALSE
     );
     
     $form['default_center']['windfarms_default_center_lat'] = array(
        '#title' => t('Latitude'),
        '#description' => t('Signed degrees fromat (DDD.dddd)'),
        '#type' => 'textfield',
        '#default_value' => variable_get('windfarms_default_center_lat'),
        '#required' => TRUE,
     );
     
     $form['default_center']['windfarms_default_center_long'] = array(
        '#title' => t('Longitude'),
        '#description' => t('Signed degrees fromat (DDD.dddd)'),
        '#type' => 'textfield',
        '#default_value' => variable_get('windfarms_default_center_long'),
        '#required' => TRUE,
     );
         
     $options = range(0, 20, 1);
     $options[0] = t('0 - Furthest');
     $options[20] = t('20 - Furthest');
     
     $form['windfarms_default_gmap_zoom'] = array(
         '#title' => t('Google Map Zoom'),
         '#description' => t('Default level of zoom, between 0 and 20.'),
         '#type' => 'select',
         '#options' => $options,
         '#default_value' => variable_get('windfarms_default_gmap_zoom'),
         '#required' => TRUE,
     );
     
     return system_settings_form($form);
     
//     $form['submit'] = array(
//        '#type' => 'submit',
//        '#value' => t('Save'),
//     );
         
//     return $form;
 }

/**
 * Validate Wind Farm admin settings.
 */
function windfarms_admin_settings_form_validate($form, &$form_state){
//  dpm($form_state['values']);
    
    // Regular expression for validating signed degrees.
//    $signed_degree_regex = '/^[+]?\d+(\.\d+)?$/';
    
    // Shorthand for long array names.
    $lat = $form_state['values']['windfarms_default_center_lat'];
    $long = $form_state['values']['windfarms_default_center_long'];
    
    if(!_windfarms_validate_signed_degrees($lat)) {
        form_set_error('windfarms_default_center_lat', t('Invalid latitude; must be a signed degree (DD.dddd).'));
    }
    
    if(!_windfarms_validate_signed_degrees($long)) {
        form_set_error('windfarms_default_center_long', t('Invalid longitude; must be a signed degree (DD.dddd).'));
    }
    
    // Validate latitude and longitude values.
    if(!_windfarms_validate_geo_coord_range($lat)){
        form_set_error('windfarms_default_center_lat', t('Latitude must be between -180 and +180'));
    }
    
    if(!_windfarms_validate_geo_coord_range($long)){
        form_set_error('windfarms_default_center_long', t('Longitude must be between -180 and +180'));
    }
    
}

/**
 * Implements hook_form_alter().
 */
function windfarms_form_alter($form, &$form_state, $form_id){
    switch($form_id){
        case 'windfarm_node_form':
            {
                $form['#validate'][] = 'windfarms_windfarm_node_form_validate';
                break;
            }
    }
}

/**
 * Validates Wind Farm content type.
 */

function windfarms_windfarm_node_form_validate($form, &$form_state){
    // Validate Unit Count.
    $value = $form_state['values']['windfarm_unit_count'][LANGUAGE_NONE][0]['value'];
    
    if($value !== '' && (!is_numeric($value) || intval($value) != $value || $value <= 0)) 
    {
        form_set_error('windfarm_unit_count', t('The number of units on a wind farm must be a positive whole number.'));
    }
    
    // Validate Latitude.
    $lat = $form_state['values']['windfarm_latitude'][LANGUAGE_NONE][0]['value'];
    
    if(!_windfarms_validate_geo_coord_range($lat) || !_windfarms_validate_signed_degrees($lat)) 
    {
        form_set_error('windfarm_latitude', t('Latitude must be valid coordinates in signed degrees.'));
    }
    
     // Validate Longitude.
    $long = $form_state['values']['windfarm_longitude'][LANGUAGE_NONE][0]['value'];
    
    if(!_windfarms_validate_geo_coord_range($long) || !_windfarms_validate_signed_degrees($long)) 
    {
        form_set_error('windfarm_longitude', t('Longitude must be valid coordinates in signed degrees.'));
    }
}


/**
 * Determine if a value is in signed degrees format.
 *
 * @param string #value
 *  The value to be tested.
 *
 * @return boolean
 *  TRUE if correctly formatted.
 */
function _windfarms_validate_signed_degrees($value){
    $signed_degree_regex = '/^[+]?\d+(\.\d+)?$/';    
    return preg_match($signed_degree_regexm, $value) ? TRUE : FALSE;
}
    
/**
 * Determine if a geographic coordinate is within the valid range.
 *
 * @param string #value
 *  The value to be tested.
 *
 * @return boolean
 *  TRUE if between -180 and 180.
 */
function _windfarms_validate_geo_coord_range($value){
    return ((-180 <= $value) && ($value <= 180));
}    

/**
 * Process a validated Wind Farm admin setting submission.
 */
//function windfarms_admin_settings_form_submit($form, &$form_state){
//    // Rebuild the form
//    $form_state['rebuild'] = TRUE;
//    
//    // Save Wind Farm setting variables.
//    variable_set('windfarms_gmap', $form_state['values']['windfarms_gmap']);
//    variable_set('windfarms_default_center_lat', $form_state['values']['windfarms_default_center_lat']);
//    variable_set('windfarms_default_center_long', $form_state['values']['windfarms_default_center_long']);
//    variable_set('windfarms_default_gmap_zoom', $form_state['values']['windfarms_default_gmap_zoom']);
//    
//    drupal_set_message(t('Wind Farm settings saved.'));
//}
//
